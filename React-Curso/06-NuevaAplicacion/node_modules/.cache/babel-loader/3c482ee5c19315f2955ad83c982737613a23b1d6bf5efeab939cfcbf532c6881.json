{"ast":null,"code":"var _jsxFileName = \"F:\\\\DARIEL MEMORIA\\\\COCO-DARIEL\\\\MoreCoasts\\\\React-Curso\\\\03-Primeros-Pasos-React\\\\src\\\\CounterApp.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport PropTypes from 'prop-types';\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n{/* Event Click \r\n    const CounterApp = ({value}) =>{\r\n \n    const handleAdd = (e) => {\r\n        console.log(e)\r\n    }\r\n \n   return (\r\n     /* \r\n            <> \r\n                <h1> CounterApp</h1>\r\n                <h2> { value } </h2>\r\n    \r\n                <button onClick = { (e) => {console.log(e) } }>+1</button> \r\n            </>\r\n    \r\n \n    \r\n    //  Otra forma \r\n        <> \r\n \t\t<h1> CounterApp</h1> \r\n \t\t<h2> { value } </h2>\r\n \n \t\t<button onClick = { handleAdd } >+1</button> \r\n \t</>\r\n \n    )  \r\n \n }\r\n \n CounterApp.propTypes= {\r\n value: PropTypes.number\r\n    \r\n }\r\n export default CounterApp; */}\n{/* useState*/}\nconst CounterApp = ({\n  value\n}) => {\n  _s();\n  // Hoocks no es más que una función.\n  const [nombre, setNombre] = useState('goku');\n  const [counter, setCounter] = useState(value);\n  // Se realiza la desutructuración y se guardan en el primer argumento, el segundo crgumento es setAlgo.\n  // handleAdd\n  const handleAdd = () => {\n    // setCounter(counter + 1); //No se puede hacer counter++\n    //Tambien recibir una función que reciba el valor del counter. Retorna el nuevo valor\n    setCounter(c => c + 1);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" CounterApp\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\" \", counter, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAdd,\n      children: \"+1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n_s(CounterApp, \"LpS4jOBDi/g+D8FQc3BBV3mUZvI=\");\n_c = CounterApp;\nCounterApp.propTypes = {\n  value: PropTypes.number\n};\nexport default CounterApp;\nvar _c;\n$RefreshReg$(_c, \"CounterApp\");","map":{"version":3,"names":["React","PropTypes","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","CounterApp","value","_s","nombre","setNombre","counter","setCounter","handleAdd","c","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","propTypes","number","$RefreshReg$"],"sources":["F:/DARIEL MEMORIA/COCO-DARIEL/MoreCoasts/React-Curso/03-Primeros-Pasos-React/src/CounterApp.js"],"sourcesContent":["import React from \"react\"; \r\nimport PropTypes from 'prop-types';\r\nimport { useState } from \"react\";\r\n\r\n{/* Event Click \r\n    const CounterApp = ({value}) =>{\r\n\r\n    const handleAdd = (e) => {\r\n        console.log(e)\r\n    }\r\n\r\n   return (\r\n     /* \r\n            <> \r\n                <h1> CounterApp</h1>\r\n                <h2> { value } </h2>\r\n    \r\n                <button onClick = { (e) => {console.log(e) } }>+1</button> \r\n            </>\r\n    \r\n\r\n    \r\n    //  Otra forma \r\n        <> \r\n\t\t\t<h1> CounterApp</h1> \r\n\t\t\t<h2> { value } </h2>\r\n\r\n\t\t\t<button onClick = { handleAdd } >+1</button> \r\n\t\t</>\r\n\r\n    )  \r\n\r\n}\r\n\r\nCounterApp.propTypes= {\r\n\tvalue: PropTypes.number\r\n    \r\n}\r\nexport default CounterApp; */ }\r\n\r\n{/* useState*/}\r\n\r\nconst CounterApp = ({value}) =>{\r\n\r\n// Hoocks no es más que una función.\r\nconst [nombre,setNombre]=useState('goku') \r\nconst [counter,setCounter]=useState(value);\r\n// Se realiza la desutructuración y se guardan en el primer argumento, el segundo crgumento es setAlgo.\r\n// handleAdd\r\n    const handleAdd=()=>{\r\n        // setCounter(counter + 1); //No se puede hacer counter++\r\n        //Tambien recibir una función que reciba el valor del counter. Retorna el nuevo valor\r\n        setCounter((c) => c+1);\r\n\r\n   }\r\n    return (\r\n            <> \r\n                <h1> CounterApp</h1>\r\n                <h2> { counter} </h2>\r\n\r\n                <button onClick = { handleAdd } >+1</button> \r\n            </>\r\n    )\r\n\r\n}\r\n\r\nCounterApp.propTypes= {\r\n\tvalue: PropTypes.number\r\n    \r\n}\r\n\r\nexport default CounterApp;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEjC,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAlCC;AAoCD,CAAC;AAED,MAAMC,UAAU,GAAGA,CAAC;EAACC;AAAK,CAAC,KAAI;EAAAC,EAAA;EAE/B;EACA,MAAM,CAACC,MAAM,EAACC,SAAS,CAAC,GAACT,QAAQ,CAAC,MAAM,CAAC;EACzC,MAAM,CAACU,OAAO,EAACC,UAAU,CAAC,GAACX,QAAQ,CAACM,KAAK,CAAC;EAC1C;EACA;EACI,MAAMM,SAAS,GAACA,CAAA,KAAI;IAChB;IACA;IACAD,UAAU,CAAEE,CAAC,IAAKA,CAAC,GAAC,CAAC,CAAC;EAE3B,CAAC;EACA,oBACQX,OAAA,CAAAE,SAAA;IAAAU,QAAA,gBACIZ,OAAA;MAAAY,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpBhB,OAAA;MAAAY,QAAA,GAAI,GAAC,EAAEJ,OAAO,EAAC,GAAC;IAAA;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAErBhB,OAAA;MAAQiB,OAAO,EAAKP,SAAW;MAAAE,QAAA,EAAE;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA,eAC9C,CAAC;AAGf,CAAC;AAAAX,EAAA,CAtBKF,UAAU;AAAAe,EAAA,GAAVf,UAAU;AAwBhBA,UAAU,CAACgB,SAAS,GAAE;EACrBf,KAAK,EAAEP,SAAS,CAACuB;AAElB,CAAC;AAED,eAAejB,UAAU;AAAC,IAAAe,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}