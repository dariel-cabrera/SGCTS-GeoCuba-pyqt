{"ast":null,"code":"import React from 'react';\n// import { Fragment } from 'react';\n\n{/* } 008 Nuestro Primer COmponente  \r\n const  PrimeraApp = () => {\r\n return <h1>Hola Mundo </h1>\r\n }\r\n export default PrimeraApp;  */}\n{/* 009 Retornar elementos en el componente Fragment  \r\n Hay que importar el Fragment  import { Fragment } from 'react';\r\n \r\n \n \n const  PrimeraApp = () => {\r\n return (\r\n \t<Fragment>    {/* Nota: Fragment + tab te lo importa solo \r\n            <h1>Hola Mundo </h1>\r\n            <p>Mi primera aplicacion</p>\r\n \t</Fragment>\r\n )\r\n }\r\n export default PrimeraApp;   */}\n{/* Existe una forma de hacer un Fragment más corta*/}\n{/* const  PrimeraApp = () => {\r\n return (\r\n \t<>     {/* Nota:Signos vacios react lo toma como  Fragment \r\n             <h1>Hola Mundo </h1>\r\n   <p>Mi primera aplicacion</p>\r\n \t</>\r\n )\r\n }\r\n export default PrimeraApp; */}\n{/* 010 Impresión de variables en el HTML \r\n \n const  PrimeraApp = () => {\r\n const saludo = 'Hola Mundo'; \r\n \r\n return (\r\n \t<>     \r\n             <h1> {saludo } </h1>\r\n   <p>Mi primera aplicacion</p>\r\n \t</>\r\n )\r\n }\r\n export default PrimeraApp; */}\n{/* Nota: Se puede imprimir datos primitivos String,Numeros, Float y Arreglos. \r\n    Los Booleanos no se muestra, en caso de los Objetos no se puede hacer de la manera anterior.\r\n \n const  PrimeraApp = () => {\r\n const saludo ={\r\n \tnombre:’Fernando’,\r\n \tedad: 34\r\n \n }\t\r\n return (\r\n \t<>     \r\n             <h1> {JSON.stringify (saludo) } </h1>\r\n             /*<pre> {JSON.stringify (saludo,null,3) } </pre>  // Lo convierte a string \r\n                                                               // Te sale en formato código \r\n   <p>Mi primera aplicacion</p>\r\n \t</>\r\n )\r\n }\r\n export default PrimeraApp; */}\n{/*Comunicación entre Componentes  */}\n{/* Prop son las propiedades que se envían a los componentes \r\n \n const PrimeraApp = ({ saludo }) => {\r\n \r\n return (\r\n \t<>\r\n \t \t<h1> { saludo } </h1>\r\n \t\t<p> 'MI primera aplicacion '</p>\r\n \t</>\r\n    )\r\n } \r\n export default PrimeraApp; \r\n \n Hay que tener en cuenta que si la propiedad no se manda del componente padre(index.js) voy a tener un undefine\r\n Existe varias formas una de ellas es poner un valor por defecto \r\n \n \n */}","map":{"version":3,"names":["React"],"sources":["F:/DARIEL MEMORIA/COCO-DARIEL/MoreCoasts/React-Curso/03-Primeros-Pasos-React/src/PrimeraApp.js"],"sourcesContent":["import React from 'react'\r\n// import { Fragment } from 'react';\r\n\r\n{/* } 008 Nuestro Primer COmponente  \r\nconst  PrimeraApp = () => {\r\n\treturn <h1>Hola Mundo </h1>\r\n}\r\nexport default PrimeraApp;  */}\r\n\r\n{/* 009 Retornar elementos en el componente Fragment  \r\nHay que importar el Fragment  import { Fragment } from 'react';\r\n \r\n\r\n\r\nconst  PrimeraApp = () => {\r\n\treturn (\r\n\t\t<Fragment>    {/* Nota: Fragment + tab te lo importa solo \r\n            <h1>Hola Mundo </h1>\r\n            <p>Mi primera aplicacion</p>\r\n\t\t</Fragment>\r\n\t)\r\n}\r\nexport default PrimeraApp;   */}\r\n\r\n\r\n{/* Existe una forma de hacer un Fragment más corta*/}\r\n\r\n{/* const  PrimeraApp = () => {\r\n\treturn (\r\n\t\t<>     {/* Nota:Signos vacios react lo toma como  Fragment \r\n             <h1>Hola Mundo </h1>\r\n   <p>Mi primera aplicacion</p>\r\n\t\t</>\r\n\t)\r\n}\r\nexport default PrimeraApp; */}\r\n\r\n{/* 010 Impresión de variables en el HTML \r\n\r\nconst  PrimeraApp = () => {\r\n\tconst saludo = 'Hola Mundo'; \r\n\t\r\nreturn (\r\n\t\t<>     \r\n             <h1> {saludo } </h1>\r\n   <p>Mi primera aplicacion</p>\r\n\t\t</>\r\n\t)\r\n}\r\nexport default PrimeraApp; */}\r\n\r\n{/* Nota: Se puede imprimir datos primitivos String,Numeros, Float y Arreglos. \r\n    Los Booleanos no se muestra, en caso de los Objetos no se puede hacer de la manera anterior.\r\n\r\nconst  PrimeraApp = () => {\r\n\tconst saludo ={\r\n\t\tnombre:’Fernando’,\r\n\t\tedad: 34\r\n\r\n}\t\r\nreturn (\r\n\t\t<>     \r\n             <h1> {JSON.stringify (saludo) } </h1>\r\n             /*<pre> {JSON.stringify (saludo,null,3) } </pre>  // Lo convierte a string \r\n                                                               // Te sale en formato código \r\n   <p>Mi primera aplicacion</p>\r\n\t\t</>\r\n\t)\r\n}\r\nexport default PrimeraApp; */}\r\n\r\n{/*Comunicación entre Componentes  */}\r\n{/* Prop son las propiedades que se envían a los componentes \r\n\r\nconst PrimeraApp = ({ saludo }) => {\r\n\t\r\n\treturn (\r\n\t\t<>\r\n\t\t \t<h1> { saludo } </h1>\r\n\t\t\t<p> 'MI primera aplicacion '</p>\r\n\t\t</>\r\n    )\r\n} \r\nexport default PrimeraApp; \r\n\r\nHay que tener en cuenta que si la propiedad no se manda del componente padre(index.js) voy a tener un undefine\r\nExiste varias formas una de ellas es poner un valor por defecto \r\n\r\n\r\n*/}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;;AAEA,CAAC;AACD;AACA;AACA;AACA,+BAJC;AAMD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAbC;AAgBD,CAAC;AAED,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BARC;AAUD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAZC;AAcD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAlBC;AAoBD,CAAC;AACD,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAjBC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}